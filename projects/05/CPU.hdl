// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=w1);

    Not(in=instruction[15], out=notouti);

    Or(a=notouti, b=instruction[5], out=loadaregister);

    ARegister(in=w1, load=loadaregister, out=w2);
    Mux16(a=w2, b=inM, sel=instruction[12], out=w3);

    And(a=instruction[15], b=instruction[4], out=loaddregister);
    DRegister(in=aluout, load=loaddregister, out=w4);

    ALU(x=w4, y=w3, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=outJEQ, ng=outJLT);

    And16(a=w2, b[0..15]=true, out[0..14]=addressM);
    And16(a=aluout, b[0..15]=true, out=outM);

    And(a=instruction[3], b=instruction[15], out=writeM);

    Or(a=outJEQ, b=outJLT, out=outJLE);
    Not(in=outJLE, out=outJGT);

    Or(a=outJGT, b=outJLT, out=outJNE);
    Not(in=outJLT, out=outJGE);

    And(a=instruction[0], b=outJGT, out=w5);
    And(a=instruction[1], b=outJEQ, out=w6);
    And(a=instruction[2], b=outJLT, out=w7);
    Or(a=w6, b=w7, out=w8);
    Or(a=w8, b=w5, out=w9);

    And(a=instruction[15], b=w9, out=loadpc);
    PC(in=w2, load=loadpc, inc=true, reset=reset, out[0..14]=pc);
}
